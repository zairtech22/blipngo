datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  name           String
  slug           String   @unique
  logoUrl        String?

  brandColor     String?   // Single poster background color
  logoBgColor    String?   // New field for the logo background color
  ctaColor       String?   // New field for the call-to-action button color
  ctaBgColor     String?
  publicTitle    String?
  publicSubtitle String?
  publicFooter   String?
  ctaLabel       String?   // still here if you want to store variant type
  ctaText        String?   // main CTA headline text
  showLogo       Boolean   @default(true)

  instagramUrl   String?
  tiktokUrl      String?
  youtubeUrl     String?
  googleReviewUrl  String?

  qrLayout       String?   // "horizontal" or "vertical"

  steps          Step[]   // relation: dynamic steps
  histories      RedirectHistory[]
  posters        Poster[] // relation: posters for platform-specific or ALL posters
  scanEvents     ScanEvent[]
}

enum PosterPlatform {
  ALL
  INSTAGRAM
  TIKTOK
  YOUTUBE
  GOOGLE
}

// Posters allow businesses to create either a single poster that shows all
// enabled platforms (platform = ALL) or platform-specific posters which
// override visual/content fields for a single platform.
model Poster {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  business     Business       @relation(fields: [businessId], references: [id])
  businessId   String

  // Which platform this poster targets. ALL means a poster that shows all
  // enabled platform QR cards. INSTAGRAM/TIKTOK/YOUTUBE/GOOGLE are platform-specific.
  platform     PosterPlatform @default(ALL)

  // Optional override fields. If null, the business-level value is used.
  brandColor     String?
  logoBgColor    String?
  ctaColor       String?
  ctaBgColor     String?
  publicTitle    String?
  publicSubtitle String?
  publicFooter   String?
  ctaText        String?
  showLogo       Boolean?      
}

model Step {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  order      Int
  text       String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

model RedirectHistory {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  platform   String
  fromUrl    String?
  toUrl      String
  changedAt  DateTime @default(now())
}

model ScanEvent {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  platform   String
  userAgent  String?
  ipHash     String?
  referer    String?
}